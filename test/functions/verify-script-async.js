const { describe, it } = require('mocha')
const { expect } = require('chai')
require('chai').use(require('chai-as-promised'))
const nimble = require('../env/nimble')
const { verifyScriptAsync, writePushData, decodeHex, decodeTx, generateTxSignature } = nimble.functions
const { BufferWriter } = nimble.classes
const {
  OP_TRUE, OP_1, OP_2, OP_3, OP_4, OP_5, OP_6, OP_7, OP_8, OP_9, OP_10, OP_11, OP_12, OP_13,
  OP_14, OP_15, OP_16, OP_PUSHDATA1, OP_PUSHDATA2, OP_PUSHDATA4, OP_2DUP, OP_2OVER, OP_2ROT,
  OP_0, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY,
  OP_MIN, OP_MAX, OP_1NEGATE, OP_NUM2BIN, OP_BIN2NUM, OP_NUMEQUALVERIFY, OP_NUMNOTEQUAL,
  OP_LESSTHAN, OP_LESSTHANOREQUAL, OP_GREATERTHAN, OP_GREATERTHANOREQUAL, OP_ADD, OP_SUB,
  OP_MUL, OP_DIV, OP_MOD, OP_BOOLAND, OP_BOOLOR, OP_NUMEQUAL, OP_WITHIN, OP_CAT, OP_SPLIT,
  OP_SIZE, OP_AND, OP_OR, OP_XOR, OP_LSHIFT, OP_RSHIFT, OP_INVERT, OP_EQUAL, OP_EQUALVERIFY,
  OP_PICK, OP_ROLL, OP_ROT, OP_SWAP, OP_TUCK, OP_2DROP, OP_3DUP, OP_2SWAP, OP_1ADD, OP_1SUB,
  OP_IF, OP_ELSE, OP_ENDIF, OP_VERIFY, OP_RETURN, OP_FALSE, OP_TOALTSTACK, OP_FROMALTSTACK,
  OP_SHA256, OP_HASH160, OP_HASH256, OP_NIP, OP_NOTIF, OP_DROP, OP_OVER, OP_NEGATE, OP_ABS,
  OP_NOT, OP_NOP, OP_IFDUP, OP_DEPTH, OP_DUP, OP_0NOTEQUAL, OP_RIPEMD160, OP_SHA1, OP_NOP1,
  OP_NOP2, OP_NOP3, OP_NOP4, OP_NOP5, OP_NOP6, OP_NOP7, OP_NOP8, OP_NOP9, OP_NOP10
} = nimble.constants.opcodes

describe('verifyScriptAsync', () => {
  it('valid', async () => {
    async function pass (script) {
      await verifyScriptAsync([], script)
    }

    function encodePushData (buffer) {
      return Array.from(writePushData(new BufferWriter(), buffer).toBuffer())
    }

    await pass([OP_TRUE])
    await pass([OP_1])
    await pass([OP_2])
    await pass([OP_3])
    await pass([OP_4])
    await pass([OP_5])
    await pass([OP_6])
    await pass([OP_7])
    await pass([OP_8])
    await pass([OP_9])
    await pass([OP_10])
    await pass([OP_11])
    await pass([OP_12])
    await pass([OP_13])
    await pass([OP_14])
    await pass([OP_15])
    await pass([OP_16])
    await pass([1, 1])
    await pass([OP_PUSHDATA1, 2, 0, 1])
    await pass([OP_PUSHDATA2, 2, 0, 0, 1])
    await pass([OP_PUSHDATA4, 2, 0, 0, 0, 0, 1])
    await pass([OP_NOP, OP_NOP, OP_NOP, OP_1])
    await pass([OP_1, OP_1, OP_IF, OP_ELSE, OP_ENDIF])
    await pass([OP_1, OP_1, OP_1, OP_IF, OP_IF, OP_ENDIF, OP_ENDIF])
    await pass([OP_1, OP_IF, OP_1, OP_ELSE, OP_0, OP_ENDIF])
    await pass([OP_0, OP_IF, OP_0, OP_ELSE, OP_1, OP_ENDIF])
    await pass([OP_1, OP_IF, OP_0, OP_1, OP_ENDIF])
    await pass([OP_1, OP_IF, OP_0, OP_IF, OP_ELSE, OP_1, OP_ENDIF, OP_ENDIF])
    await pass([OP_1, OP_IF, OP_PUSHDATA1, 1, 0, OP_1, OP_ENDIF])
    await pass([OP_1, OP_IF, OP_ELSE, OP_ELSE, OP_1, OP_ENDIF])
    await pass([OP_1, OP_IF, OP_ELSE, OP_ELSE, OP_ELSE, OP_ELSE, OP_1, OP_ENDIF])
    await pass([OP_1, OP_IF, OP_1, OP_ELSE, OP_1, OP_IF, OP_ENDIF, OP_ENDIF])
    await pass([OP_1, OP_VERIFY, OP_1])
    await pass([OP_1, OP_RETURN])
    await pass([OP_FALSE, OP_TRUE, OP_RETURN])
    await pass([OP_1, OP_0, OP_TOALTSTACK])
    await pass([OP_1, OP_TOALTSTACK, OP_FROMALTSTACK])
    await pass([OP_1, OP_IFDUP, OP_DROP, OP_DROP, OP_1])
    await pass([OP_DEPTH, OP_1])
    await pass([OP_0, OP_DEPTH])
    await pass([OP_1, OP_0, OP_DROP])
    await pass([OP_0, OP_DUP, OP_DROP, OP_DROP, OP_1])
    await pass([OP_1, OP_0, OP_0, OP_NIP, OP_DROP])
    await pass([OP_1, OP_0, OP_OVER])
    await pass([OP_1, OP_0, OP_PICK])
    await pass([OP_1, OP_0, OP_0, OP_0, OP_0, OP_4, OP_PICK])
    await pass([2, 0xff, 0xff, OP_1, OP_1, OP_PICK, 2, 0xff, 0xff, OP_EQUAL])
    await pass([OP_1, OP_0, OP_ROLL])
    await pass([OP_1, OP_0, OP_0, OP_ROLL, OP_DROP])
    await pass([OP_1, OP_0, OP_0, OP_0, OP_0, OP_4, OP_ROLL])
    await pass([OP_1, OP_0, OP_0, OP_ROT])
    await pass([OP_0, OP_1, OP_0, OP_ROT, OP_ROT])
    await pass([OP_0, OP_0, OP_1, OP_ROT, OP_ROT, OP_ROT])
    await pass([OP_1, OP_0, OP_SWAP])
    await pass([OP_0, OP_1, OP_TUCK, OP_DROP, OP_DROP])
    await pass([OP_1, OP_0, OP_0, OP_2DROP])
    await pass([OP_0, OP_1, OP_2DUP])
    await pass([OP_0, OP_1, OP_2DUP, OP_DROP, OP_DROP])
    await pass([OP_0, OP_0, OP_1, OP_3DUP])
    await pass([OP_0, OP_0, OP_1, OP_3DUP, OP_DROP, OP_DROP, OP_DROP])
    await pass([OP_0, OP_1, OP_0, OP_0, OP_2OVER])
    await pass([OP_0, OP_0, OP_0, OP_1, OP_2OVER, OP_DROP, OP_DROP])
    await pass([OP_0, OP_1, OP_0, OP_0, OP_0, OP_0, OP_2ROT])
    await pass([OP_0, OP_0, OP_0, OP_1, OP_0, OP_0, OP_2ROT, OP_2ROT])
    await pass([OP_0, OP_0, OP_0, OP_0, OP_0, OP_1, OP_2ROT, OP_2ROT, OP_2ROT])
    await pass([OP_1, OP_0, OP_0, OP_0, OP_0, OP_0, OP_2ROT, OP_DROP])
    await pass([OP_0, OP_1, OP_0, OP_0, OP_2SWAP])
    await pass([OP_1, OP_0, OP_0, OP_0, OP_2SWAP, OP_DROP])
    await pass([OP_0, OP_0, OP_CAT, OP_0, OP_EQUAL])
    await pass([OP_0, OP_1, OP_CAT, OP_1, OP_EQUAL])
    await pass([OP_1, OP_2, OP_CAT, 2, 1, 2, OP_EQUAL])
    await pass([OP_1, OP_0, OP_0, OP_2, OP_0, OP_CAT, OP_PICK])
    await pass([OP_0, OP_0, OP_CAT, OP_IF, OP_ELSE, OP_1, OP_ENDIF])
    await pass([2, OP_0, OP_1, OP_1, OP_SPLIT])
    await pass([2, OP_0, OP_1, OP_2, OP_SPLIT, OP_DROP])
    await pass([2, OP_0, OP_1, OP_0, OP_SPLIT])
    await pass([OP_0, OP_0, OP_SPLIT, OP_1])
    await pass([OP_1, OP_1, OP_SPLIT, OP_DROP])
    await pass([3, 0x00, 0x11, 0x22, OP_0, OP_SPLIT, 3, 0x00, 0x11, 0x22, OP_EQUALVERIFY, OP_0, OP_EQUAL])
    await pass([3, 0x00, 0x11, 0x22, OP_1, OP_SPLIT, 2, 0x11, 0x22, OP_EQUALVERIFY, 1, 0x00, OP_EQUAL])
    await pass([3, 0x00, 0x11, 0x22, OP_2, OP_SPLIT, 1, 0x22, OP_EQUALVERIFY, 2, 0x00, 0x11, OP_EQUAL])
    await pass([3, 0x00, 0x11, 0x22, OP_3, OP_SPLIT, OP_0, OP_EQUALVERIFY, 3, 0x00, 0x11, 0x22, OP_EQUAL])
    await pass([2, OP_0, OP_1, OP_SIZE, OP_2, OP_EQUALVERIFY])
    await pass([OP_1, OP_SIZE])
    await pass([OP_1, OP_SIZE, OP_DROP])
    await pass([OP_1, OP_1, OP_AND])
    await pass([OP_1, OP_1, OP_OR])
    await pass([OP_1, OP_1, OP_XOR, OP_IF, OP_ELSE, OP_1, OP_ENDIF])
    await pass([3, 0xFF, 0x01, 0x00, OP_INVERT, 3, 0x00, 0xFE, 0xFF, OP_EQUAL])
    await pass([OP_0, OP_0, OP_LSHIFT, OP_0, OP_EQUAL])
    await pass([OP_4, OP_2, OP_LSHIFT, OP_16, OP_EQUAL])
    await pass([2, 0x12, 0x34, OP_4, OP_LSHIFT, 2, 0x23, 0x40, OP_EQUAL])
    await pass([OP_0, OP_0, OP_RSHIFT, OP_0, OP_EQUAL])
    await pass([OP_4, OP_2, OP_RSHIFT, OP_1, OP_EQUAL])
    await pass([2, 0x12, 0x34, OP_4, OP_RSHIFT, 2, 0x01, 0x23, OP_EQUAL])
    await pass([OP_0, OP_0, OP_EQUAL])
    await pass([OP_1, OP_1, OP_EQUAL])
    await pass([OP_1, OP_0, OP_0, OP_EQUALVERIFY])
    await pass([OP_0, OP_1ADD])
    await pass([OP_1, OP_1ADD, OP_2, OP_EQUAL])
    await pass([OP_2, OP_1SUB])
    await pass([OP_0, OP_1SUB, OP_1NEGATE, OP_EQUAL])
    await pass([4, 0xFF, 0xFF, 0xFF, 0x7F, OP_1ADD, OP_SIZE, OP_5, OP_EQUAL])
    await pass([4, 0xFF, 0xFF, 0xFF, 0xFF, OP_1SUB, OP_SIZE, OP_5, OP_EQUAL])
    await pass([OP_1, OP_NEGATE, OP_1NEGATE, OP_EQUAL])
    await pass([OP_1NEGATE, OP_NEGATE, OP_1, OP_EQUAL])
    await pass([OP_1, OP_ABS, OP_1, OP_EQUAL])
    await pass([OP_1NEGATE, OP_ABS, OP_1, OP_EQUAL])
    await pass([OP_0, OP_NOT])
    await pass([OP_1, OP_NOT, OP_0, OP_EQUAL])
    await pass([OP_2, OP_NOT, OP_0, OP_EQUAL])
    await pass([OP_1, OP_NOT, OP_NOT])
    await pass([OP_1, OP_0NOTEQUAL])
    await pass([OP_0, OP_0NOTEQUAL, OP_0, OP_EQUAL])
    await pass([OP_2, OP_0NOTEQUAL])
    await pass([5, 0, 0, 0, 0, 0, OP_1ADD])
    await pass([5, 0, 0, 0, 0, 0, OP_1SUB])
    await pass([5, 0, 0, 0, 0, 0, OP_NEGATE, OP_1])
    await pass([5, 0, 0, 0, 0, 0, OP_ABS, OP_1])
    await pass([5, 0, 0, 0, 0, 0, OP_NOT])
    await pass([5, 0, 0, 0, 0, 0, OP_0NOTEQUAL, OP_1])
    await pass([OP_0, OP_1, OP_ADD])
    await pass([OP_1, OP_0, OP_ADD])
    await pass([OP_1, OP_2, OP_ADD, OP_3, OP_EQUAL])
    await pass([4, 0xFF, 0xFF, 0xFF, 0xFF, 4, 0xFF, 0xFF, 0xFF, 0xFF, OP_ADD, OP_SIZE, OP_5, OP_EQUAL])
    await pass([5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, OP_ADD, OP_SIZE, OP_6, OP_EQUAL])
    await pass([4, 0xFF, 0xFF, 0xFF, 0x7F, 4, 0xFF, 0xFF, 0xFF, 0xFF, OP_ADD, OP_0, OP_EQUAL])
    await pass([OP_2, OP_1, OP_SUB])
    await pass([OP_1, OP_1, OP_SUB, OP_0, OP_EQUAL])
    await pass([4, 0xFF, 0xFF, 0xFF, 0xFF, 4, 0xFF, 0xFF, 0xFF, 0x7F, OP_SUB, OP_SIZE, OP_5, OP_EQUAL])
    await pass([4, 0xFF, 0xFF, 0xFF, 0x7F, 4, 0xFF, 0xFF, 0xFF, 0x7F, OP_SUB, OP_0, OP_EQUAL])
    await pass([OP_1, OP_1, OP_MUL, OP_1, OP_EQUAL])
    await pass([OP_2, OP_3, OP_MUL, OP_6, OP_EQUAL])
    await pass([4, 0xFF, 0xFF, 0xFF, 0x7F, 4, 0xFF, 0xFF, 0xFF, 0x7F, OP_MUL])
    await pass([OP_1, OP_1NEGATE, OP_MUL, OP_1NEGATE, OP_EQUAL])
    await pass([OP_1, OP_1, OP_DIV, OP_1, OP_EQUAL])
    await pass([OP_5, OP_2, OP_DIV, OP_2, OP_EQUAL])
    await pass([OP_2, OP_1NEGATE, OP_DIV, 1, 130, OP_EQUAL])
    await pass([OP_1, OP_1, OP_MOD, OP_0, OP_EQUAL])
    await pass([OP_5, OP_2, OP_MOD, OP_1, OP_EQUAL])
    await pass([OP_5, 1, 0x82, OP_MOD, OP_1, OP_EQUAL])
    await pass([1, 0x83, OP_2, OP_MOD, OP_1NEGATE, OP_EQUAL])
    await pass([OP_1, OP_1, OP_BOOLAND])
    await pass([OP_0, OP_1, OP_BOOLAND, OP_0, OP_EQUAL])
    await pass([OP_1, OP_0, OP_BOOLOR])
    await pass([OP_0, OP_0, OP_BOOLOR, OP_0, OP_EQUAL])
    await pass([OP_1, OP_1, OP_NUMEQUAL])
    await pass([OP_0, OP_1, OP_NUMEQUAL, OP_NOT])
    await pass([OP_1, OP_1, OP_NUMEQUALVERIFY, OP_1])
    await pass([OP_1, OP_0, OP_NUMNOTEQUAL])
    await pass([OP_1, OP_1, OP_NUMNOTEQUAL, OP_NOT])
    await pass([OP_0, OP_1, OP_LESSTHAN])
    await pass([OP_1, OP_2, OP_LESSTHAN])
    await pass([OP_1NEGATE, OP_0, OP_LESSTHAN])
    await pass([OP_0, OP_0, OP_LESSTHAN, OP_NOT])
    await pass([OP_1, OP_0, OP_GREATERTHAN])
    await pass([OP_0, OP_1NEGATE, OP_GREATERTHAN])
    await pass([OP_2, OP_1, OP_GREATERTHAN])
    await pass([OP_0, OP_0, OP_GREATERTHAN, OP_NOT])
    await pass([OP_0, OP_1, OP_LESSTHANOREQUAL])
    await pass([OP_1NEGATE, OP_0, OP_LESSTHANOREQUAL])
    await pass([OP_0, OP_0, OP_LESSTHANOREQUAL])
    await pass([OP_1NEGATE, OP_1NEGATE, OP_LESSTHANOREQUAL])
    await pass([OP_1, OP_0, OP_GREATERTHANOREQUAL])
    await pass([OP_0, OP_1NEGATE, OP_GREATERTHANOREQUAL])
    await pass([OP_0, OP_0, OP_GREATERTHANOREQUAL])
    await pass([OP_1, OP_1, OP_GREATERTHANOREQUAL])
    await pass([OP_0, OP_1, OP_MIN, OP_0, OP_EQUAL])
    await pass([OP_0, OP_0, OP_MIN, OP_0, OP_EQUAL])
    await pass([OP_1NEGATE, OP_0, OP_MIN, OP_1NEGATE, OP_EQUAL])
    await pass([OP_0, OP_1, OP_MAX, OP_1, OP_EQUAL])
    await pass([OP_0, OP_0, OP_MAX, OP_0, OP_EQUAL])
    await pass([OP_1NEGATE, OP_0, OP_MAX, OP_0, OP_EQUAL])
    await pass([OP_0, OP_0, OP_1, OP_WITHIN])
    await pass([OP_0, OP_1NEGATE, OP_1, OP_WITHIN])
    await pass([1, 0, OP_BIN2NUM, OP_0, OP_EQUAL])
    await pass([7, 1, 0, 0, 0, 0, 0, 0, OP_BIN2NUM, OP_1, OP_EQUAL])
    await pass([7, 1, 0, 0, 0, 0, 0, 0x80, OP_BIN2NUM, OP_1NEGATE, OP_EQUAL])
    await pass([1, 0x80, OP_BIN2NUM, OP_0, OP_EQUAL])
    await pass([7, 0, 0, 0, 0, 0, 0, 0x80, OP_BIN2NUM, OP_0, OP_EQUAL])
    await pass([OP_1, OP_7, OP_NUM2BIN, 7, 1, 0, 0, 0, 0, 0, 0, OP_EQUAL])
    await pass([OP_0, OP_4, OP_NUM2BIN, OP_0, OP_NUMEQUAL])
    await pass([OP_0, OP_4, OP_NUM2BIN, OP_0, OP_EQUAL, OP_NOT])
    await pass([OP_1, OP_1, OP_16, OP_NUM2BIN, OP_BIN2NUM, OP_EQUAL])
    await pass([OP_1NEGATE, OP_DUP, OP_16, OP_NUM2BIN, OP_BIN2NUM, OP_EQUAL])
    await pass([OP_1, 5, 129, 0, 0, 0, 0, OP_NUM2BIN])
    await pass([OP_1, OP_RIPEMD160])
    await pass([OP_0, OP_RIPEMD160])
    await pass(encodePushData(decodeHex('cea1b21f1a739fba68d1d4290437d2c5609be1d3')).concat(
      encodePushData(decodeHex('0123456789abcdef'))).concat([OP_RIPEMD160, OP_EQUAL]))
    await pass([OP_1, OP_SHA1])
    await pass([OP_0, OP_SHA1])
    await pass(encodePushData(decodeHex('0ca2eadb529ac2e63abf9b4ae3df8ee121f10547')).concat(
      encodePushData(decodeHex('0123456789abcdef'))).concat([OP_SHA1, OP_EQUAL]))
    await pass([OP_1, OP_SHA256])
    await pass([OP_0, OP_SHA256])
    await pass(encodePushData(decodeHex('55c53f5d490297900cefa825d0c8e8e9532ee8a118abe7d8570762cd38be9818')).concat(
      encodePushData(decodeHex('0123456789abcdef'))).concat([OP_SHA256, OP_EQUAL]))
    await pass([OP_1, OP_HASH160])
    await pass([OP_0, OP_HASH160])
    await pass(encodePushData(decodeHex('a956ed79819901b1b2c7b3ec045081f749c588ed')).concat(
      encodePushData(decodeHex('0123456789abcdef'))).concat([OP_HASH160, OP_EQUAL]))
    await pass([OP_1, OP_HASH256])
    await pass([OP_0, OP_HASH256])
    await pass(encodePushData(decodeHex('137ad663f79da06e282ed0abbec4d70523ced5ff8e39d5c2e5641d978c5925aa')).concat(
      encodePushData(decodeHex('0123456789abcdef'))).concat([OP_HASH256, OP_EQUAL]))
    await pass([OP_NOP1, OP_NOP2, OP_NOP3, OP_NOP4, OP_NOP5,
      OP_NOP6, OP_NOP7, OP_NOP8, OP_NOP9, OP_NOP10, OP_1])
  })

  it('checksig', async () => {
    const rawtx = '0100000001b207aba3f19358f3a58048d7647cff2ca25a57fe92a1c4324ba47fdde7d7eca4030000006a4730440220316f5707b0a872c67bebc10f15832389c96a6be58e803c992d6b4b3bc5864687022019cf6ab02706865b8507a4f56eeae155ac794a363d95dce8c8777c10f1f9fc01412103093313584be3ccd8777947c1b8f9cc945e9764296451aa29209f9ac56eb4e91affffffff03204e0000000000001976a91461ed573d90e9582689739e72d17624b2d8faa4c388ac204e0000000000001976a914fca1fe054916c043dc36d703a464cb6edce8e72e88ac5b0c6e01000000001976a91400937c46183f418f8eaac2af10db62c5c852ffe888ac00000000'
    const prevrawtx = '01000000014b71d4aa217e6e515f343c1b5f3e6294fd416e8fa782b089a412c6e32ad0ed07050000006a4730440220449b66c7ec56b6e6f4c133e3cce67cb74e97bbc924deb3f4dbf43e3de941d05e0220649510d81de69df1bbef6b627dab88e20fa272a811613f97503c45715146c929412103a8ff752878232a096647f90350851419daca06a498f382de8b89772930ad4727ffffffff0450c30000000000001976a914902bfe624e2620a4615e7bb6511abd2c2fc7ff7d88ac204e0000000000001976a9149e2f22092ab09053c8be4a662045c069205a511588ac10270000000000001976a914eec1eda286b8fd1a198b6f6ee103bd24d3cdbd5188ac37a96e01000000001976a9149595b9d204ca44fde3b4fb43eff8e8b9d74edd8a88ac00000000'
    const vin = 0
    const tx = decodeTx(decodeHex(rawtx))
    const prevtx = decodeTx(decodeHex(prevrawtx))
    const input = tx.inputs[vin]
    const vout = input.vout
    const unlockScript = input.script
    const prevout = prevtx.outputs[vout]
    const lockScript = prevout.script
    const parentSatoshis = prevout.satoshis
    await verifyScriptAsync(unlockScript, lockScript, tx, vin, parentSatoshis)
  })

  it('checksigverify', async () => {
    const pk = nimble.PrivateKey.fromRandom()

    const lockScriptWriter = new BufferWriter()
    writePushData(lockScriptWriter, pk.toPublicKey().toBuffer())
    lockScriptWriter.write([OP_CHECKSIGVERIFY])
    lockScriptWriter.write([OP_1])
    const lockScript = lockScriptWriter.toBuffer()

    const tx1 = new nimble.Transaction().output({ script: lockScript, satoshis: 1000 })

    const tx2 = new nimble.Transaction().from(tx1.outputs[0])

    const signature = generateTxSignature(tx2, 0, lockScript, 1000, pk.number, pk.toPublicKey().point)

    const unlockScriptWriter = new BufferWriter()
    writePushData(unlockScriptWriter, signature)
    const unlockScript = unlockScriptWriter.toBuffer()
    tx2.inputs[0].script = unlockScript

    await verifyScriptAsync(unlockScript, lockScript, tx2, 0, 1000)
  })

  it('checkmultisig valid', async () => {
    const pk1 = nimble.PrivateKey.fromRandom()
    const pk2 = nimble.PrivateKey.fromRandom()
    const pk3 = nimble.PrivateKey.fromRandom()

    const lockScriptWriter = new BufferWriter()
    lockScriptWriter.write([OP_2])
    writePushData(lockScriptWriter, pk1.toPublicKey().toBuffer())
    writePushData(lockScriptWriter, pk2.toPublicKey().toBuffer())
    writePushData(lockScriptWriter, pk3.toPublicKey().toBuffer())
    lockScriptWriter.write([OP_3])
    lockScriptWriter.write([OP_CHECKMULTISIG])
    const lockScript = lockScriptWriter.toBuffer()

    const tx1 = new nimble.Transaction().output({ script: lockScript, satoshis: 1000 })

    const tx2 = new nimble.Transaction().from(tx1.outputs[0])

    const signature1 = generateTxSignature(tx2, 0, lockScript, 1000, pk1.number, pk1.toPublicKey().point)
    const signature3 = generateTxSignature(tx2, 0, lockScript, 1000, pk3.number, pk3.toPublicKey().point)

    const unlockScriptWriter = new BufferWriter()
    unlockScriptWriter.write([OP_0])
    writePushData(unlockScriptWriter, signature1)
    writePushData(unlockScriptWriter, signature3)
    const unlockScript = unlockScriptWriter.toBuffer()
    tx2.inputs[0].script = unlockScript

    await verifyScriptAsync(unlockScript, lockScript, tx2, 0, 1000)
  })

  it('checkmultisig throws if out of order', async () => {
    const pk1 = nimble.PrivateKey.fromRandom()
    const pk2 = nimble.PrivateKey.fromRandom()
    const pk3 = nimble.PrivateKey.fromRandom()

    const lockScriptWriter = new BufferWriter()
    lockScriptWriter.write([OP_2])
    writePushData(lockScriptWriter, pk1.toPublicKey().toBuffer())
    writePushData(lockScriptWriter, pk2.toPublicKey().toBuffer())
    writePushData(lockScriptWriter, pk3.toPublicKey().toBuffer())
    lockScriptWriter.write([OP_3])
    lockScriptWriter.write([OP_CHECKMULTISIG])
    const lockScript = lockScriptWriter.toBuffer()

    const tx1 = new nimble.Transaction().output({ script: lockScript, satoshis: 1000 })

    const tx2 = new nimble.Transaction().from(tx1.outputs[0])

    const signature1 = generateTxSignature(tx2, 0, lockScript, 1000, pk1.number, pk1.toPublicKey().point)
    const signature3 = generateTxSignature(tx2, 0, lockScript, 1000, pk3.number, pk3.toPublicKey().point)

    const unlockScriptWriter = new BufferWriter()
    unlockScriptWriter.write([OP_0])
    writePushData(unlockScriptWriter, signature3)
    writePushData(unlockScriptWriter, signature1)
    const unlockScript = unlockScriptWriter.toBuffer()
    tx2.inputs[0].script = unlockScript

    await expect(verifyScriptAsync(unlockScript, lockScript, tx2, 0, 1000)).to.be.rejected
  })

  it('checkmultisigverify throws if repeat signatures', async () => {
    const pk1 = nimble.PrivateKey.fromRandom()
    const pk2 = nimble.PrivateKey.fromRandom()
    const pk3 = nimble.PrivateKey.fromRandom()

    const lockScriptWriter = new BufferWriter()
    lockScriptWriter.write([OP_2])
    writePushData(lockScriptWriter, pk1.toPublicKey().toBuffer())
    writePushData(lockScriptWriter, pk2.toPublicKey().toBuffer())
    writePushData(lockScriptWriter, pk3.toPublicKey().toBuffer())
    lockScriptWriter.write([OP_3])
    lockScriptWriter.write([OP_CHECKMULTISIGVERIFY])
    const lockScript = lockScriptWriter.toBuffer()

    const tx1 = new nimble.Transaction().output({ script: lockScript, satoshis: 1000 })

    const tx2 = new nimble.Transaction().from(tx1.outputs[0])

    const signature1 = generateTxSignature(tx2, 0, lockScript, 1000, pk1.number, pk1.toPublicKey().point)

    const unlockScriptWriter = new BufferWriter()
    unlockScriptWriter.write([OP_0])
    writePushData(unlockScriptWriter, signature1)
    writePushData(unlockScriptWriter, signature1)
    const unlockScript = unlockScriptWriter.toBuffer()
    tx2.inputs[0].script = unlockScript

    await expect(verifyScriptAsync(unlockScript, lockScript, tx2, 0, 1000)).to.be.rejected
  })

  it('invalid', async () => {
    async function fail (script) {
      await expect(verifyScriptAsync([], script)).to.be.rejected
    }

    await fail([])
    await fail([OP_FALSE])
    await fail([1])
    await fail([3, 0, 1])
    await fail([OP_PUSHDATA1, 0])
    await fail([OP_PUSHDATA1, 1])
    await fail([OP_PUSHDATA1, 10, 0])
    await fail([OP_PUSHDATA2, 20, 0])
    await fail([OP_PUSHDATA4, 30, 0])
    await fail([OP_IF, OP_ENDIF])
    await fail([OP_1, OP_1, OP_IF])
    await fail([OP_1, OP_1, OP_NOTIF])
    await fail([OP_1, OP_ELSE])
    await fail([OP_1, OP_ENDIF])
    await fail([OP_1, OP_1, OP_IF, OP_ELSE])
    await fail([OP_1, OP_1, OP_IF, OP_IF, OP_ENDIF])
    await fail([OP_0, OP_IF, OP_1, OP_ELSE, OP_0, OP_ENDIF])
    await fail([OP_0, OP_IF, OP_PUSHDATA1, 1, 1, OP_1, OP_ENDIF])
    await fail([OP_VERIFY])
    await fail([OP_0, OP_VERIFY])
    await fail([OP_RETURN])
    await fail([OP_FALSE, OP_RETURN])
    await fail([OP_TOALTSTACK, OP_1])
    await fail([OP_FROMALTSTACK, OP_1])
    await fail([OP_0, OP_TOALTSTACK, OP_1, OP_FROMALTSTACK])
    await fail([OP_IFDUP])
    await fail([OP_DROP])
    await fail([OP_1, OP_DROP, OP_DROP])
    await fail([OP_DUP])
    await fail([OP_NIP])
    await fail([OP_1, OP_NIP])
    await fail([OP_OVER])
    await fail([OP_1, OP_OVER])
    await fail([OP_PICK])
    await fail([OP_0, OP_PICK])
    await fail([OP_0, OP_1, OP_PICK])
    await fail([OP_ROLL])
    await fail([OP_0, OP_ROLL])
    await fail([OP_0, OP_1, OP_ROLL])
    await fail([OP_ROT])
    await fail([OP_1, OP_ROT])
    await fail([OP_1, OP_1, OP_ROT])
    await fail([OP_0, OP_1, OP_1, OP_ROT])
    await fail([OP_SWAP])
    await fail([OP_1, OP_SWAP])
    await fail([OP_0, OP_1, OP_SWAP])
    await fail([OP_TUCK])
    await fail([OP_1, OP_TUCK])
    await fail([OP_1, OP_0, OP_TUCK])
    await fail([OP_2DROP])
    await fail([OP_1, OP_2DROP])
    await fail([OP_1, OP_1, OP_2DROP])
    await fail([OP_2DUP])
    await fail([OP_1, OP_2DUP])
    await fail([OP_1, OP_0, OP_2DUP])
    await fail([OP_3DUP])
    await fail([OP_1, OP_3DUP])
    await fail([OP_1, OP_1, OP_3DUP])
    await fail([OP_1, OP_1, OP_0, OP_3DUP])
    await fail([OP_2OVER])
    await fail([OP_1, OP_2OVER])
    await fail([OP_1, OP_1, OP_2OVER])
    await fail([OP_1, OP_1, OP_1, OP_2OVER])
    await fail([OP_1, OP_0, OP_1, OP_1, OP_2OVER])
    await fail([OP_2ROT])
    await fail([OP_1, OP_2ROT])
    await fail([OP_1, OP_1, OP_2ROT])
    await fail([OP_1, OP_1, OP_1, OP_2ROT])
    await fail([OP_1, OP_1, OP_1, OP_1, OP_2ROT])
    await fail([OP_1, OP_1, OP_1, OP_1, OP_1, OP_2ROT])
    await fail([OP_1, OP_0, OP_1, OP_1, OP_1, OP_1, OP_2ROT])
    await fail([OP_2SWAP])
    await fail([OP_1, OP_2SWAP])
    await fail([OP_1, OP_1, OP_2SWAP])
    await fail([OP_1, OP_1, OP_1, OP_2SWAP])
    await fail([OP_1, OP_0, OP_1, OP_1, OP_2SWAP])
    await fail([OP_CAT])
    await fail([OP_1, OP_CAT])
    await fail([OP_1, OP_0, OP_0, OP_CAT])
    await fail([OP_SPLIT])
    await fail([OP_1, OP_SPLIT])
    await fail([OP_0, OP_1, OP_SPLIT])
    await fail([OP_1, OP_2, OP_SPLIT])
    await fail([OP_1, OP_1NEGATE, OP_SPLIT])
    await fail([OP_0, OP_SIZE])
    await fail([OP_AND])
    await fail([OP_0, OP_AND])
    await fail([OP_0, OP_1, OP_AND])
    await fail([OP_OR])
    await fail([OP_0, OP_OR])
    await fail([OP_0, OP_1, OP_OR])
    await fail([OP_XOR])
    await fail([OP_0, OP_XOR])
    await fail([OP_0, OP_1, OP_XOR])
    await fail([OP_LSHIFT])
    await fail([OP_1, OP_LSHIFT])
    await fail([OP_1, OP_1NEGATE, OP_LSHIFT])
    await fail([OP_RSHIFT])
    await fail([OP_1, OP_RSHIFT])
    await fail([OP_1, OP_1NEGATE, OP_RSHIFT])
    await fail([OP_INVERT])
    await fail([OP_EQUAL])
    await fail([OP_0, OP_EQUAL])
    await fail([OP_1, OP_0, OP_EQUAL])
    await fail([OP_1, OP_0, OP_EQUALVERIFY, OP_1])
    await fail([OP_1ADD])
    await fail([OP_1SUB])
    await fail([OP_NEGATE])
    await fail([OP_ABS])
    await fail([OP_NOT])
    await fail([OP_0NOTEQUAL])
    await fail([OP_ADD])
    await fail([OP_1, OP_ADD])
    await fail([5, 0, 0, 0, 0, 0, OP_ADD])
    await fail([OP_SUB])
    await fail([OP_1, OP_SUB])
    await fail([5, 0, 0, 0, 0, 0, OP_SUB])
    await fail([OP_MUL])
    await fail([OP_1, OP_MUL])
    await fail([5, 0, 0, 0, 0, 0, OP_MUL])
    await fail([2, 0, 0, 2, 0, 0, OP_MUL])
    await fail([OP_DIV])
    await fail([OP_1, OP_DIV])
    await fail([5, 0, 0, 0, 0, 0, OP_DIV])
    await fail([OP_1, OP_0, OP_DIV])
    await fail([OP_MOD])
    await fail([OP_1, OP_MOD])
    await fail([5, 0, 0, 0, 0, 0, OP_MOD])
    await fail([OP_1, OP_0, OP_MOD])
    await fail([OP_BOOLAND])
    await fail([OP_1, OP_BOOLAND])
    await fail([5, 0, 0, 0, 0, 0, OP_BOOLAND])
    await fail([OP_BOOLOR])
    await fail([OP_1, OP_BOOLOR])
    await fail([5, 0, 0, 0, 0, 0, OP_BOOLOR])
    await fail([OP_NUMEQUAL])
    await fail([OP_1, OP_NUMEQUAL])
    await fail([5, 0, 0, 0, 0, 0, OP_NUMEQUAL])
    await fail([OP_0, OP_1, OP_NUMEQUAL])
    await fail([OP_NUMEQUALVERIFY])
    await fail([OP_1, OP_NUMEQUALVERIFY])
    await fail([5, 0, 0, 0, 0, 0, OP_NUMEQUALVERIFY])
    await fail([OP_1, OP_2, OP_NUMEQUALVERIFY])
    await fail([OP_NUMNOTEQUAL])
    await fail([OP_1, OP_NUMNOTEQUAL])
    await fail([5, 0, 0, 0, 0, 0, OP_NUMNOTEQUAL])
    await fail([OP_1, OP_1, OP_NUMNOTEQUAL])
    await fail([OP_LESSTHAN])
    await fail([OP_1, OP_LESSTHAN])
    await fail([5, 0, 0, 0, 0, 0, OP_LESSTHAN])
    await fail([OP_1, OP_0, OP_LESSTHAN])
    await fail([OP_0, OP_1NEGATE, OP_LESSTHAN])
    await fail([OP_GREATERTHAN])
    await fail([OP_1, OP_GREATERTHAN])
    await fail([5, 0, 0, 0, 0, 0, OP_GREATERTHAN])
    await fail([OP_0, OP_1, OP_GREATERTHAN])
    await fail([OP_1NEGATE, OP_0, OP_GREATERTHAN])
    await fail([OP_LESSTHANOREQUAL])
    await fail([OP_1, OP_LESSTHANOREQUAL])
    await fail([5, 0, 0, 0, 0, 0, OP_LESSTHANOREQUAL])
    await fail([OP_1, OP_0, OP_LESSTHANOREQUAL])
    await fail([OP_0, OP_1NEGATE, OP_LESSTHANOREQUAL])
    await fail([OP_GREATERTHANOREQUAL])
    await fail([OP_1, OP_GREATERTHANOREQUAL])
    await fail([5, 0, 0, 0, 0, 0, OP_GREATERTHANOREQUAL])
    await fail([OP_0, OP_1, OP_GREATERTHANOREQUAL])
    await fail([OP_1NEGATE, OP_0, OP_GREATERTHANOREQUAL])
    await fail([OP_MIN])
    await fail([OP_1, OP_MIN])
    await fail([5, 0, 0, 0, 0, 0, OP_MIN])
    await fail([OP_MAX])
    await fail([OP_1, OP_MAX])
    await fail([5, 0, 0, 0, 0, 0, OP_MAX])
    await fail([OP_WITHIN])
    await fail([OP_1, OP_WITHIN])
    await fail([OP_1, OP_1, OP_WITHIN])
    await fail([5, 0, 0, 0, 0, 0, OP_WITHIN])
    await fail([OP_0, OP_1, OP_2, OP_WITHIN])
    await fail([OP_0, OP_1NEGATE, OP_0, OP_WITHIN])
    await fail([OP_BIN2NUM])
    await fail([OP_NUM2BIN])
    await fail([OP_1, OP_NUM2BIN])
    await fail([OP_1, OP_0, OP_NUM2BIN])
    await fail([OP_1, OP_1NEGATE, OP_NUM2BIN])
    await fail([5, 129, 0, 0, 0, 0, OP_1, OP_NUM2BIN])
    await fail([OP_RIPEMD160])
    await fail([OP_SHA1])
    await fail([OP_SHA256])
    await fail([OP_HASH160])
    await fail([OP_HASH256])
    await fail([OP_CHECKSIG])
    await fail([OP_1, OP_CHECKSIG])
    await fail([OP_CHECKSIGVERIFY])
    await fail([OP_1, OP_CHECKSIGVERIFY])
    await fail([OP_CHECKMULTISIG])
    await fail([OP_1, OP_CHECKMULTISIG])
    await fail([OP_0, OP_0, OP_CHECKMULTISIG])
    await fail([OP_0, OP_0, OP_1NEGATE, OP_CHECKMULTISIG])
    await fail([OP_0, OP_1NEGATE, OP_0, OP_CHECKMULTISIG])
    await fail([OP_0, OP_0, OP_1, OP_CHECKMULTISIG])
    await fail([OP_0, OP_0, 1, 21, OP_CHECKMULTISIG])
    await fail([OP_0, OP_9, OP_9, OP_2, OP_9, OP_1, OP_CHECKMULTISIG])
    await fail([OP_NOP10 + 1])
    await fail([255])
  })
})
